// <auto-generated />
using System;
using DirectStorageApproach.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DirectStorageApproach.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DirectStorageApproach.Domain.Aggregates.Notification.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DetectedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("Executor")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("Number")
                        .HasColumnType("bigint");

                    b.Property<Guid>("TechnicalObjectId")
                        .HasColumnType("uuid");

                    b.Property<long>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint");

                    b.Property<int>("_currentStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("StatusId");

                    b.Property<bool>("_isDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted");

                    b.HasKey("Id");

                    b.HasIndex("TechnicalObjectId");

                    b.HasIndex("_currentStatusId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("DirectStorageApproach.Domain.Aggregates.Notification.NotificationComment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("NotificationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int?>("_fromStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("FromStatusId");

                    b.Property<bool>("_isDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted");

                    b.Property<int?>("_toStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("ToStatusId");

                    b.HasKey("Id");

                    b.HasIndex("NotificationId");

                    b.HasIndex("_fromStatusId");

                    b.HasIndex("_toStatusId");

                    b.ToTable("NotificationComments");
                });

            modelBuilder.Entity("DirectStorageApproach.Domain.Aggregates.Notification.NotificationStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("NotificationStatuses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "New"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Declined"
                        },
                        new
                        {
                            Id = 3,
                            Name = "InProgress"
                        },
                        new
                        {
                            Id = 4,
                            Name = "ActionRequired"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Resubmitted"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Done"
                        });
                });

            modelBuilder.Entity("DirectStorageApproach.Domain.Aggregates.NotificationTechnicalObjectLink", b =>
                {
                    b.Property<Guid>("TechnicalObjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("NotificationId")
                        .HasColumnType("uuid");

                    b.HasKey("TechnicalObjectId", "NotificationId");

                    b.HasIndex("NotificationId");

                    b.ToTable("NotificationTechnicalObjectLinks", (string)null);
                });

            modelBuilder.Entity("DirectStorageApproach.Domain.Aggregates.TechnicalObject.TechnicalObject", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<char>("Category")
                        .HasColumnType("character(1)");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("TechnicalObjects");

                    b.HasDiscriminator<int>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("DirectStorageApproach.Domain.Aggregates.TechnicalObject.Equipment", b =>
                {
                    b.HasBaseType("DirectStorageApproach.Domain.Aggregates.TechnicalObject.TechnicalObject");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("DirectStorageApproach.Domain.Aggregates.TechnicalObject.FunctionalLocation", b =>
                {
                    b.HasBaseType("DirectStorageApproach.Domain.Aggregates.TechnicalObject.TechnicalObject");

                    b.Property<bool>("IsEquipmentInstallAllowed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSingleEquipmentInstalled")
                        .HasColumnType("boolean");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("DirectStorageApproach.Domain.Aggregates.Notification.Notification", b =>
                {
                    b.HasOne("DirectStorageApproach.Domain.Aggregates.TechnicalObject.TechnicalObject", null)
                        .WithMany()
                        .HasForeignKey("TechnicalObjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DirectStorageApproach.Domain.Aggregates.Notification.NotificationStatus", null)
                        .WithMany()
                        .HasForeignKey("_currentStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.OwnsOne("DirectStorageApproach.Domain.Aggregates.Notification.ValueObjects.Breakdown", "Breakdown", b1 =>
                        {
                            b1.Property<Guid>("NotificationId")
                                .HasColumnType("uuid");

                            b1.Property<TimeSpan?>("Duration")
                                .HasColumnType("interval")
                                .HasColumnName("BreakdownDuration");

                            b1.Property<DateTimeOffset?>("Finish")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("BreakdownFinish");

                            b1.Property<DateTimeOffset?>("Start")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("BreakdownStart");

                            b1.HasKey("NotificationId");

                            b1.ToTable("Notifications");

                            b1.WithOwner()
                                .HasForeignKey("NotificationId");
                        });

                    b.Navigation("Breakdown");
                });

            modelBuilder.Entity("DirectStorageApproach.Domain.Aggregates.Notification.NotificationComment", b =>
                {
                    b.HasOne("DirectStorageApproach.Domain.Aggregates.Notification.Notification", null)
                        .WithMany("Comments")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DirectStorageApproach.Domain.Aggregates.Notification.NotificationStatus", null)
                        .WithMany()
                        .HasForeignKey("_fromStatusId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DirectStorageApproach.Domain.Aggregates.Notification.NotificationStatus", null)
                        .WithMany()
                        .HasForeignKey("_toStatusId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("DirectStorageApproach.Domain.Aggregates.NotificationTechnicalObjectLink", b =>
                {
                    b.HasOne("DirectStorageApproach.Domain.Aggregates.Notification.Notification", null)
                        .WithMany("TechnicalObjects")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DirectStorageApproach.Domain.Aggregates.TechnicalObject.TechnicalObject", b =>
                {
                    b.HasOne("DirectStorageApproach.Domain.Aggregates.TechnicalObject.TechnicalObject", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("DirectStorageApproach.Domain.Aggregates.TechnicalObject.ValueObjects.Acquisition", "Acquisition", b1 =>
                        {
                            b1.Property<Guid>("TechnicalObjectId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Currency")
                                .HasColumnType("text")
                                .HasColumnName("AcquisitionCurrency");

                            b1.Property<DateTimeOffset>("Date")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("AcquisitionDate");

                            b1.Property<decimal>("Price")
                                .HasColumnType("numeric")
                                .HasColumnName("AcquisitionPrice");

                            b1.HasKey("TechnicalObjectId");

                            b1.ToTable("TechnicalObjects");

                            b1.WithOwner()
                                .HasForeignKey("TechnicalObjectId");
                        });

                    b.OwnsOne("DirectStorageApproach.Domain.Aggregates.TechnicalObject.ValueObjects.Manufacturer", "Manufacturer", b1 =>
                        {
                            b1.Property<Guid>("TechnicalObjectId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Country")
                                .HasColumnType("text")
                                .HasColumnName("ManufacturerCountry");

                            b1.Property<DateTimeOffset>("ManufacturedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("ManufacturedAt");

                            b1.Property<string>("Model")
                                .HasColumnType("text")
                                .HasColumnName("ManufacturerModel");

                            b1.Property<string>("Name")
                                .HasColumnType("text")
                                .HasColumnName("ManufacturerName");

                            b1.Property<string>("PartNumber")
                                .HasColumnType("text")
                                .HasColumnName("ManufacturerPartNumber");

                            b1.Property<string>("SerialNumber")
                                .HasColumnType("text")
                                .HasColumnName("ManufacturerSerialNumber");

                            b1.HasKey("TechnicalObjectId");

                            b1.ToTable("TechnicalObjects");

                            b1.WithOwner()
                                .HasForeignKey("TechnicalObjectId");
                        });

                    b.OwnsOne("DirectStorageApproach.Domain.Aggregates.TechnicalObject.ValueObjects.Weight", "Weight", b1 =>
                        {
                            b1.Property<Guid>("TechnicalObjectId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text")
                                .HasColumnName("WeightUnit");

                            b1.Property<decimal>("Value")
                                .HasColumnType("numeric")
                                .HasColumnName("Weight");

                            b1.HasKey("TechnicalObjectId");

                            b1.ToTable("TechnicalObjects");

                            b1.WithOwner()
                                .HasForeignKey("TechnicalObjectId");
                        });

                    b.Navigation("Acquisition");

                    b.Navigation("Manufacturer");

                    b.Navigation("Parent");

                    b.Navigation("Weight");
                });

            modelBuilder.Entity("DirectStorageApproach.Domain.Aggregates.Notification.Notification", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("TechnicalObjects");
                });

            modelBuilder.Entity("DirectStorageApproach.Domain.Aggregates.TechnicalObject.TechnicalObject", b =>
                {
                    b.Navigation("Children");
                });
#pragma warning restore 612, 618
        }
    }
}
