// <auto-generated />
using System;
using MappingToDbEntitiesApproach.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MappingToDbEntitiesApproach.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20230406113936_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "ltree");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MappingToDbEntitiesApproach.Infrastructure.Persistence.Entities.NotificationTechnicalObjectLink", b =>
                {
                    b.Property<Guid>("TechnicalObjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("NotificationId")
                        .HasColumnType("uuid");

                    b.HasKey("TechnicalObjectId", "NotificationId");

                    b.HasIndex("NotificationId");

                    b.ToTable("NotificationTechnicalObjectLinks", (string)null);
                });

            modelBuilder.Entity("MappingToDbEntitiesApproach.Infrastructure.Persistence.Entities.Notifications.NotificationCommentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("FromStatusId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("NotificationEntityId")
                        .HasColumnType("uuid");

                    b.Property<int?>("ToStatusId")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FromStatusId");

                    b.HasIndex("NotificationEntityId");

                    b.HasIndex("ToStatusId");

                    b.ToTable("NotificationComments");
                });

            modelBuilder.Entity("MappingToDbEntitiesApproach.Infrastructure.Persistence.Entities.Notifications.NotificationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DetectedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("Executor")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("Number")
                        .HasColumnType("bigint");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<Guid>("TechnicalObjectId")
                        .HasColumnType("uuid");

                    b.Property<long>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.HasIndex("TechnicalObjectId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("MappingToDbEntitiesApproach.Infrastructure.Persistence.Entities.Notifications.NotificationStatusEntity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("NotificationStatuses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "New"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Declined"
                        },
                        new
                        {
                            Id = 3,
                            Name = "InProgress"
                        },
                        new
                        {
                            Id = 4,
                            Name = "ActionRequired"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Resubmitted"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Done"
                        });
                });

            modelBuilder.Entity("MappingToDbEntitiesApproach.Infrastructure.Persistence.Entities.TechnicalObjects.TechnicalObjectEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<char>("Category")
                        .HasColumnType("character(1)");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("ltree");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("Path");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Path"), "gist");

                    b.ToTable("TechnicalObjects");

                    b.HasDiscriminator<int>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("MappingToDbEntitiesApproach.Infrastructure.Persistence.Entities.TechnicalObjects.EquipmentEntity", b =>
                {
                    b.HasBaseType("MappingToDbEntitiesApproach.Infrastructure.Persistence.Entities.TechnicalObjects.TechnicalObjectEntity");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("MappingToDbEntitiesApproach.Infrastructure.Persistence.Entities.TechnicalObjects.FunctionalLocationEntity", b =>
                {
                    b.HasBaseType("MappingToDbEntitiesApproach.Infrastructure.Persistence.Entities.TechnicalObjects.TechnicalObjectEntity");

                    b.Property<bool>("IsEquipmentInstallAllowed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSingleEquipmentInstalled")
                        .HasColumnType("boolean");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("MappingToDbEntitiesApproach.Infrastructure.Persistence.Entities.NotificationTechnicalObjectLink", b =>
                {
                    b.HasOne("MappingToDbEntitiesApproach.Infrastructure.Persistence.Entities.Notifications.NotificationEntity", "Notification")
                        .WithMany("TechnicalObjects")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MappingToDbEntitiesApproach.Infrastructure.Persistence.Entities.TechnicalObjects.TechnicalObjectEntity", "TechnicalObject")
                        .WithMany("Notifications")
                        .HasForeignKey("TechnicalObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("TechnicalObject");
                });

            modelBuilder.Entity("MappingToDbEntitiesApproach.Infrastructure.Persistence.Entities.Notifications.NotificationCommentEntity", b =>
                {
                    b.HasOne("MappingToDbEntitiesApproach.Infrastructure.Persistence.Entities.Notifications.NotificationStatusEntity", "FromStatus")
                        .WithMany()
                        .HasForeignKey("FromStatusId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("MappingToDbEntitiesApproach.Infrastructure.Persistence.Entities.Notifications.NotificationEntity", null)
                        .WithMany("Comments")
                        .HasForeignKey("NotificationEntityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MappingToDbEntitiesApproach.Infrastructure.Persistence.Entities.Notifications.NotificationStatusEntity", "ToStatus")
                        .WithMany()
                        .HasForeignKey("ToStatusId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("FromStatus");

                    b.Navigation("ToStatus");
                });

            modelBuilder.Entity("MappingToDbEntitiesApproach.Infrastructure.Persistence.Entities.Notifications.NotificationEntity", b =>
                {
                    b.HasOne("MappingToDbEntitiesApproach.Infrastructure.Persistence.Entities.Notifications.NotificationStatusEntity", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MappingToDbEntitiesApproach.Infrastructure.Persistence.Entities.TechnicalObjects.TechnicalObjectEntity", "TechnicalObject")
                        .WithMany()
                        .HasForeignKey("TechnicalObjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.OwnsOne("MappingToDbEntitiesApproach.Infrastructure.Persistence.Entities.Notifications.OwnedBreakdown", "Breakdown", b1 =>
                        {
                            b1.Property<Guid>("NotificationEntityId")
                                .HasColumnType("uuid");

                            b1.Property<long?>("Duration")
                                .HasColumnType("bigint")
                                .HasColumnName("BreakdownDuration");

                            b1.Property<DateTimeOffset?>("Finish")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("BreakdownFinish");

                            b1.Property<DateTimeOffset?>("Start")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("BreakdownStart");

                            b1.HasKey("NotificationEntityId");

                            b1.ToTable("Notifications");

                            b1.WithOwner()
                                .HasForeignKey("NotificationEntityId");
                        });

                    b.Navigation("Breakdown");

                    b.Navigation("Status");

                    b.Navigation("TechnicalObject");
                });

            modelBuilder.Entity("MappingToDbEntitiesApproach.Infrastructure.Persistence.Entities.TechnicalObjects.TechnicalObjectEntity", b =>
                {
                    b.HasOne("MappingToDbEntitiesApproach.Infrastructure.Persistence.Entities.TechnicalObjects.TechnicalObjectEntity", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("MappingToDbEntitiesApproach.Domain.Aggregates.TechnicalObject.ValueObjects.Acquisition", "Acquisition", b1 =>
                        {
                            b1.Property<Guid>("TechnicalObjectEntityId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Currency")
                                .HasColumnType("text")
                                .HasColumnName("AcquisitionCurrency");

                            b1.Property<DateTimeOffset>("Date")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("AcquisitionDate");

                            b1.Property<decimal>("Price")
                                .HasColumnType("numeric")
                                .HasColumnName("AcquisitionPrice");

                            b1.HasKey("TechnicalObjectEntityId");

                            b1.ToTable("TechnicalObjects");

                            b1.WithOwner()
                                .HasForeignKey("TechnicalObjectEntityId");
                        });

                    b.OwnsOne("MappingToDbEntitiesApproach.Domain.Aggregates.TechnicalObject.ValueObjects.Manufacturer", "Manufacturer", b1 =>
                        {
                            b1.Property<Guid>("TechnicalObjectEntityId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Country")
                                .HasColumnType("text")
                                .HasColumnName("ManufacturerCountry");

                            b1.Property<DateTimeOffset>("ManufacturedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("ManufacturedAt");

                            b1.Property<string>("Model")
                                .HasColumnType("text")
                                .HasColumnName("ManufacturerModel");

                            b1.Property<string>("Name")
                                .HasColumnType("text")
                                .HasColumnName("ManufacturerName");

                            b1.Property<string>("PartNumber")
                                .HasColumnType("text")
                                .HasColumnName("ManufacturerPartNumber");

                            b1.Property<string>("SerialNumber")
                                .HasColumnType("text")
                                .HasColumnName("ManufacturerSerialNumber");

                            b1.HasKey("TechnicalObjectEntityId");

                            b1.ToTable("TechnicalObjects");

                            b1.WithOwner()
                                .HasForeignKey("TechnicalObjectEntityId");
                        });

                    b.OwnsOne("MappingToDbEntitiesApproach.Domain.Aggregates.TechnicalObject.ValueObjects.Weight", "Weight", b1 =>
                        {
                            b1.Property<Guid>("TechnicalObjectEntityId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text")
                                .HasColumnName("WeightUnit");

                            b1.Property<decimal>("Value")
                                .HasColumnType("numeric")
                                .HasColumnName("Weight");

                            b1.HasKey("TechnicalObjectEntityId");

                            b1.ToTable("TechnicalObjects");

                            b1.WithOwner()
                                .HasForeignKey("TechnicalObjectEntityId");
                        });

                    b.Navigation("Acquisition");

                    b.Navigation("Manufacturer");

                    b.Navigation("Parent");

                    b.Navigation("Weight");
                });

            modelBuilder.Entity("MappingToDbEntitiesApproach.Infrastructure.Persistence.Entities.Notifications.NotificationEntity", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("TechnicalObjects");
                });

            modelBuilder.Entity("MappingToDbEntitiesApproach.Infrastructure.Persistence.Entities.TechnicalObjects.TechnicalObjectEntity", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Notifications");
                });
#pragma warning restore 612, 618
        }
    }
}
